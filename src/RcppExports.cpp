// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sort_str
CharacterVector sort_str(std::vector< std::string > strings);
RcppExport SEXP _o2plsda_sort_str(SEXP stringsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::string > >::type strings(stringsSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_str(strings));
    return rcpp_result_gen;
END_RCPP
}
// sample_cpp
IntegerVector sample_cpp(IntegerVector x, int n);
RcppExport SEXP _o2plsda_sample_cpp(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_cpp(x, n));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_rmse
double rcpp_rmse(Rcpp::NumericVector& y, Rcpp::NumericVector& y_hat);
RcppExport SEXP _o2plsda_rcpp_rmse(SEXP ySEXP, SEXP y_hatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type y_hat(y_hatSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_rmse(y, y_hat));
    return rcpp_result_gen;
END_RCPP
}
// order_str
IntegerVector order_str(CharacterVector& x);
RcppExport SEXP _o2plsda_order_str(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(order_str(x));
    return rcpp_result_gen;
END_RCPP
}
// order_cpp
IntegerVector order_cpp(IntegerVector& x);
RcppExport SEXP _o2plsda_order_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(order_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// split_str
List split_str(CharacterVector x);
RcppExport SEXP _o2plsda_split_str(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(split_str(x));
    return rcpp_result_gen;
END_RCPP
}
// unlist_cpp
SEXP unlist_cpp(const List& list);
RcppExport SEXP _o2plsda_unlist_cpp(SEXP listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type list(listSEXP);
    rcpp_result_gen = Rcpp::wrap(unlist_cpp(list));
    return rcpp_result_gen;
END_RCPP
}
// sample_lapply
List sample_lapply(List X, int n);
RcppExport SEXP _o2plsda_sample_lapply(SEXP XSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_lapply(X, n));
    return rcpp_result_gen;
END_RCPP
}
// getMCCV_cpp
IntegerVector getMCCV_cpp(CharacterVector x, int n);
RcppExport SEXP _o2plsda_getMCCV_cpp(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(getMCCV_cpp(x, n));
    return rcpp_result_gen;
END_RCPP
}
// colsds
NumericVector colsds(arma::mat& X);
RcppExport SEXP _o2plsda_colsds(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(colsds(X));
    return rcpp_result_gen;
END_RCPP
}
// s2
double s2(arma::mat x);
RcppExport SEXP _o2plsda_s2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(s2(x));
    return rcpp_result_gen;
END_RCPP
}
// Q
double Q(arma::mat y, arma::mat y_hat);
RcppExport SEXP _o2plsda_Q(SEXP ySEXP, SEXP y_hatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y_hat(y_hatSEXP);
    rcpp_result_gen = Rcpp::wrap(Q(y, y_hat));
    return rcpp_result_gen;
END_RCPP
}
// column_sums
NumericVector column_sums(arma::mat X);
RcppExport SEXP _o2plsda_column_sums(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(column_sums(X));
    return rcpp_result_gen;
END_RCPP
}
// opls
List opls(arma::mat& X, arma::mat& Y, int ncomp, double maxiter, double tol);
RcppExport SEXP _o2plsda_opls(SEXP XSEXP, SEXP YSEXP, SEXP ncompSEXP, SEXP maxiterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type ncomp(ncompSEXP);
    Rcpp::traits::input_parameter< double >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(opls(X, Y, ncomp, maxiter, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_o2plsda_sort_str", (DL_FUNC) &_o2plsda_sort_str, 1},
    {"_o2plsda_sample_cpp", (DL_FUNC) &_o2plsda_sample_cpp, 2},
    {"_o2plsda_rcpp_rmse", (DL_FUNC) &_o2plsda_rcpp_rmse, 2},
    {"_o2plsda_order_str", (DL_FUNC) &_o2plsda_order_str, 1},
    {"_o2plsda_order_cpp", (DL_FUNC) &_o2plsda_order_cpp, 1},
    {"_o2plsda_split_str", (DL_FUNC) &_o2plsda_split_str, 1},
    {"_o2plsda_unlist_cpp", (DL_FUNC) &_o2plsda_unlist_cpp, 1},
    {"_o2plsda_sample_lapply", (DL_FUNC) &_o2plsda_sample_lapply, 2},
    {"_o2plsda_getMCCV_cpp", (DL_FUNC) &_o2plsda_getMCCV_cpp, 2},
    {"_o2plsda_colsds", (DL_FUNC) &_o2plsda_colsds, 1},
    {"_o2plsda_s2", (DL_FUNC) &_o2plsda_s2, 1},
    {"_o2plsda_Q", (DL_FUNC) &_o2plsda_Q, 2},
    {"_o2plsda_column_sums", (DL_FUNC) &_o2plsda_column_sums, 1},
    {"_o2plsda_opls", (DL_FUNC) &_o2plsda_opls, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_o2plsda(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
