% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sparse_plsda.R
\name{stability_selection}
\alias{stability_selection}
\title{Stability Selection for Sparse Methods}
\usage{
stability_selection(
  X,
  Y,
  nc,
  keepX_range = seq(10, 100, 10),
  n_bootstrap = 100,
  threshold = 0.8,
  method = "sparse_plsda",
  parallel = TRUE,
  ncores = NULL
)
}
\arguments{
\item{X}{Numeric matrix (samples x variables). The predictor data matrix.}

\item{Y}{Factor, character vector, or numeric matrix. Response data.}

\item{nc}{Integer. Number of components to extract.}

\item{keepX_range}{Vector of integers. Range of keepX values to test (default: seq(10, 100, 10)).}

\item{n_bootstrap}{Integer. Number of bootstrap samples (default: 100).}

\item{threshold}{Numeric. Stability threshold between 0 and 1 (default: 0.8).
Variables selected in at least this proportion of bootstrap samples are considered stable.}

\item{method}{Character. Method to use: "sparse_plsda" or "sparse_o2pls".}

\item{parallel}{Logical. Use parallel processing (default: TRUE).}

\item{ncores}{Integer. Number of cores for parallel processing (default: NULL, auto-detect).}
}
\value{
stability_selection object containing selection probabilities and stable variables.
}
\description{
Performs bootstrap stability selection to identify robust features across
multiple bootstrap samples and sparsity levels.
}
\details{
Stability selection is a method for controlling the expected number of false
positive selections in high-dimensional variable selection. It works by
applying the sparse method to many bootstrap samples and identifying variables
that are consistently selected across different samples and sparsity levels.

The threshold parameter controls the stringency of selection. Higher values
(closer to 1) result in more conservative selection with fewer false positives
but potentially more false negatives.
}
\examples{
# Example 1: Stability selection for sparse PLS-DA
set.seed(456)
n <- 100
p <- 150

# Generate data with stable and unstable signals
X <- matrix(rnorm(n * p), n, p)

# Create stable signal in first 15 variables
stable_signal <- matrix(rnorm(n * 2), n, 2)
X[, 1:15] <- stable_signal \%*\% matrix(rnorm(2 * 15), 2, 15) + 
             matrix(rnorm(n * 15, sd = 0.3), n, 15)

# Create unstable/noise signal in variables 16-30
X[, 16:30] <- X[, 16:30] + matrix(rnorm(n * 15, sd = 0.8), n, 15)

# Create classes based on stable signal
class_probs <- plogis(rowSums(X[, 1:5]) - mean(rowSums(X[, 1:5])))
Y <- factor(ifelse(runif(n) < class_probs, "Class1", "Class2"))

colnames(X) <- paste0("Var_", 1:p)

# Perform stability selection (reduced parameters for quick example)
stability_result <- stability_selection(
    X = X,
    Y = Y,
    nc = 2,
    keepX_range = seq(10, 40, 10),   # Test fewer sparsity levels
    n_bootstrap = 50,                # Fewer bootstrap samples for speed
    threshold = 0.7,                 # 70\% stability threshold
    method = "sparse_plsda",
    parallel = FALSE,                # Disable parallel for example
    ncores = 1
)

# View results
print(stability_result)

# Extract stable variables for each component
stable_comp1 <- stability_result$stable_variables$Component_1
stable_comp2 <- stability_result$stable_variables$Component_2

if(!is.null(stable_comp1)) {
    cat("Stable variables in Component 1:\n")
    print(stable_comp1)
}

if(!is.null(stable_comp2)) {
    cat("Stable variables in Component 2:\n")
    print(stable_comp2)
}

# Plot stability results
plot(stability_result, type = "heatmap", component = 1)
plot(stability_result, type = "barplot", component = 1, top_n = 30)

# Example 2: Stability selection for sparse O2PLS
# Generate correlated X and Y matrices
Y_matrix <- matrix(rnorm(n * 50), n, 50)
# Add correlation with X
Y_matrix[, 1:10] <- X[, 1:10] + matrix(rnorm(n * 10, sd = 0.5), n, 10)

colnames(Y_matrix) <- paste0("Y_", 1:50)

# Stability selection for O2PLS
\dontrun{
stability_o2pls <- stability_selection(
    X = X,
    Y = Y_matrix,
    nc = 2,
    keepX_range = seq(15, 45, 15),
    n_bootstrap = 100,
    threshold = 0.8,
    method = "sparse_o2pls",
    parallel = TRUE,
    ncores = 2
)

# Extract stable variables for both X and Y
stable_X <- stability_o2pls$stable_variables$Component_1$Variable_Name
stable_Y <- stability_o2pls$stable_variables$Component_1$Variable_Name
}

# Example 3: Different stability thresholds
# Compare conservative vs liberal thresholds
\dontrun{
# Conservative selection (80\% threshold)
stability_conservative <- stability_selection(
    X, Y, nc = 2, threshold = 0.8, n_bootstrap = 100
)

# Liberal selection (60\% threshold)  
stability_liberal <- stability_selection(
    X, Y, nc = 2, threshold = 0.6, n_bootstrap = 100
)

# Compare number of stable variables
n_stable_cons <- length(stability_conservative$stable_variables$Component_1$Variable)
n_stable_lib <- length(stability_liberal$stable_variables$Component_1$Variable)

cat("Conservative (80\%):", n_stable_cons, "stable variables\n")
cat("Liberal (60\%):", n_stable_lib, "stable variables\n")
}

}
\seealso{
\code{\link{sparse_plsda}}, \code{\link{sparse_o2pls}}, \code{\link{plot.stability_selection}}
}
\author{
Kai Guo
}
