% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.R
\name{plot.SparseO2pls}
\alias{plot.SparseO2pls}
\title{Complete example workflow incorporating all new plotting functions}
\usage{
\method{plot}{SparseO2pls}(
  x,
  type = "score",
  component = c(1, 2),
  block = "X",
  group = NULL,
  top = 20,
  threshold = 1e-10,
  color = NULL,
  ellipse = TRUE,
  title = NULL,
  ...
)
}
\arguments{
\item{x}{A SparseO2pls S4 object}

\item{type}{Character. Type of plot: "score", "loading", "sparsity", "selection", 
"biplot", "contribution", "comparison", or "diagnostic"}

\item{component}{Integer or vector. Which component(s) to plot (default: c(1,2))}

\item{block}{Character. Which data block: "X", "Y", or "both" (default: "X")}

\item{group}{Factor. Grouping variable for score plots}

\item{top}{Integer. Number of top variables to show in loading plots (default: 20)}

\item{threshold}{Numeric. Threshold for variable selection display (default: 1e-10)}

\item{color}{Character vector. Custom colors for groups}

\item{ellipse}{Logical. Add confidence ellipses to score plots (default: TRUE)}

\item{title}{Character. Custom plot title}

\item{...}{Additional plotting parameters}
}
\value{
ggplot2 object or plotly object (for 3D plots)
}
\description{
Complete example workflow incorporating all new plotting functions
}
\examples{
\dontrun{
# =============================================================================
# COMPREHENSIVE PLOTTING WORKFLOW
# =============================================================================

library(o2plsda)
library(ggplot2)
library(gridExtra)

# 1. Generate example data
set.seed(42)
n <- 100
p_X <- 200
p_Y <- 150

X <- matrix(rnorm(n * p_X), n, p_X)
Y <- matrix(rnorm(n * p_Y), n, p_Y)

# Add structured signal
signal <- matrix(rnorm(n * 3), n, 3)
X[, 1:30] <- signal \%*\% matrix(rnorm(3 * 30), 3, 30) + matrix(rnorm(n * 30, sd = 0.4), n, 30)
Y[, 1:25] <- signal \%*\% matrix(rnorm(3 * 25), 3, 25) + matrix(rnorm(n * 25, sd = 0.4), n, 25)

colnames(X) <- paste0("Gene_", 1:p_X)
colnames(Y) <- paste0("Metabolite_", 1:p_Y)
groups <- factor(rep(c("Control", "Disease", "Treatment"), length.out = n))

# 2. Parameter tuning
tune_results <- tune_o2pls(X, Y, nc_range = 1:3, nx_range = 0:2, ny_range = 0:2, 
                          folds = 3, nrepeat = 3, progressBar = FALSE)

# Plot tuning results
plot(tune_results, type = "heatmap")
plot(tune_results, type = "line")
plot(tune_results, type = "comparison")

# 3. Fit models
regular_fit <- o2pls(X, Y, nc = 2, nx = 1, ny = 1)
sparse_fit <- sparse_o2pls(X, Y, nc = 2, nx = 1, ny = 1, keepX = c(40, 30), keepY = c(30, 25))

# 4. Sparse O2PLS plots
plot(sparse_fit, type = "score", block = "X", group = groups, ellipse = TRUE)
plot(sparse_fit, type = "loading", block = "X", component = 1, top = 25)
plot(sparse_fit, type = "sparsity", block = "both")
plot(sparse_fit, type = "selection")
plot(sparse_fit, type = "biplot", component = c(1, 2), group = groups, top = 20)

# 5. Classification analysis
sparse_plsda_fit <- sparse_plsda(X, groups, nc = 2, keepX = c(35, 25))
class(sparse_plsda_fit) <- "sparse_plsda"  # Ensure correct class

plot(sparse_plsda_fit, type = "score", group = groups, ellipse = TRUE)
plot(sparse_plsda_fit, type = "loading", component = 1, top = 20)
plot(sparse_plsda_fit, type = "vip", component = 1, top = 25)
plot(sparse_plsda_fit, type = "selection")

# 6. Stability selection
stability_results <- stability_selection(X, groups, nc = 2, keepX_range = seq(20, 60, 20),
                                         n_bootstrap = 30, threshold = 0.7, 
                                         method = "sparse_plsda", parallel = FALSE)

plot(stability_results, type = "heatmap", component = 1, top_n = 40)
plot(stability_results, type = "barplot", component = 1, top_n = 25)
plot(stability_results, type = "threshold")
plot(stability_results, type = "summary")

# 7. Model comparison
compare_models(regular_fit, sparse_fit, type = "performance", 
              names = c("Regular O2PLS", "Sparse O2PLS"))

# 8. Create comprehensive dashboard
p1 <- plot(sparse_fit, type = "score", block = "X", group = groups) + ggtitle("A) Sparse O2PLS Scores")
p2 <- plot(sparse_fit, type = "loading", block = "X", component = 1, top = 15) + ggtitle("B) Top Loadings")
p3 <- plot(sparse_fit, type = "sparsity", block = "both") + ggtitle("C) Sparsity Pattern")
p4 <- plot(sparse_plsda_fit, type = "vip", component = 1, top = 15) + ggtitle("D) VIP Scores")

dashboard <- grid.arrange(p1, p2, p3, p4, ncol = 2,
                         top = textGrob("Comprehensive O2PLS Analysis Dashboard", 
                                       gp = gpar(fontsize = 16, fontface = "bold")))

print(dashboard)
}
Plot method for SparseO2pls S4 objects

Creates various plots for sparse O2PLS models stored as S4 objects, including 
score plots, loading plots, sparsity patterns, and variable selection summaries.

# Generate example data for SparseO2pls plotting
set.seed(456)
n <- 120
p_X <- 180
p_Y <- 120

# Create structured data
X <- matrix(rnorm(n * p_X), n, p_X)
Y <- matrix(rnorm(n * p_Y), n, p_Y)

# Add correlated signal
signal <- matrix(rnorm(n * 4), n, 4)
X[, 1:40] <- signal \%*\% matrix(rnorm(4 * 40), 4, 40) + 
             matrix(rnorm(n * 40, sd = 0.4), n, 40)
Y[, 1:30] <- signal \%*\% matrix(rnorm(4 * 30), 4, 30) + 
             matrix(rnorm(n * 30, sd = 0.4), n, 30)

# Add meaningful names
colnames(X) <- paste0("Gene_", 1:p_X)
colnames(Y) <- paste0("Protein_", 1:p_Y)
rownames(X) <- rownames(Y) <- paste0("Sample_", 1:n)

# Create grouping variable
treatment_groups <- factor(rep(c("Control", "Low_Dose", "High_Dose", "Recovery"), 
                              each = n/4))

# Fit sparse O2PLS and convert to S4 object
sparse_fit_list <- sparse_o2pls(X, Y, nc = 3, nx = 1, ny = 1,
                                keepX = c(50, 40, 30), keepY = c(35, 25, 20))

# Convert to S4 SparseO2pls object
sparse_s4 <- new("SparseO2pls",
                 X = X, Y = Y,
                 params = sparse_fit_list$params,
                 results = sparse_fit_list$results,
                 sparsity = sparse_fit_list$sparsity)

# =============================================================================
# SCORE PLOTS
# =============================================================================

# 2D score plot for X block with treatment groups
p1 <- plot(sparse_s4, type = "score", block = "X", 
           component = c(1, 2), group = treatment_groups, ellipse = TRUE)
print(p1)

# 2D score plot for Y block
p2 <- plot(sparse_s4, type = "score", block = "Y", 
           component = c(1, 3), group = treatment_groups,
           color = c("#E31A1C", "#1F78B4", "#33A02C", "#FF7F00"))
print(p2)

# 3D score plot
p3 <- plot(sparse_s4, type = "score", block = "X",
           component = c(1, 2, 3), group = treatment_groups)
print(p3)

# =============================================================================
# LOADING PLOTS
# =============================================================================

# Top gene loadings for component 1
p4 <- plot(sparse_s4, type = "loading", block = "X",
           component = 1, top = 30)
print(p4)

# Top protein loadings for component 2
p5 <- plot(sparse_s4, type = "loading", block = "Y",
           component = 2, top = 25,
           title = "Top Protein Loadings - Component 2")
print(p5)

# Multi-component loading comparison
p6 <- plot(sparse_s4, type = "loading", block = "X",
           component = c(1, 2, 3), top = 35)
print(p6)

# =============================================================================
# SPARSITY AND SELECTION PLOTS
# =============================================================================

# Sparsity pattern for both blocks
p7 <- plot(sparse_s4, type = "sparsity", block = "both")
print(p7)

# Variable selection summary
p8 <- plot(sparse_s4, type = "selection")
print(p8)

# =============================================================================
# ADVANCED PLOTS
# =============================================================================

# Biplot combining scores and loadings
p9 <- plot(sparse_s4, type = "biplot", 
           component = c(1, 2), group = treatment_groups, top = 20)
print(p9)

# Variable contribution analysis
p10 <- plot(sparse_s4, type = "contribution", block = "X",
            component = 1, top = 25)
print(p10)

# Diagnostic plots
p11 <- plot(sparse_s4, type = "diagnostic")
print(p11)

}
